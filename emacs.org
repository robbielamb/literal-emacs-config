#+TITLE: Robbie's emacs config
#+AUTHOR: Robbie Lamb
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper]

* Configuring Emacs:
  
  There was an article on hacker news a week or so ago about a literal
  emacs config file. This is my attempt at recreating it.

  This file should closely mirror information at [[http://zeekat.nl/articles/making-emacs-work-for-me.html]]

* How to use
** Obtaining the source
This is currently hidden away on my private git repository.

** Installation Procedure
- Install Emacs 24
- Install Cask from [[https://github.com/cask/cask]]
- Clone this repo into $HOME/.emacs.d
- Run cask install in $HOME/.emacs.d
- Start Emacs

** Issues
None, this should be perfect *smile*.
* Graphics
** Color Theme
   I really like the solarized theme. Lets start with that one

   #+name: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (load-theme 'solarized-dark t)
   #+END_SRC

** Nyan Cat
   I've had Nyan cat for awhile. Lets keep it around.

   #+name: look-and-feel
   #+BEGIN_SRC emacs-lisp
      (nyan-mode +1)
      (nyan-start-animation)
   #+END_SRC

** Font
   I generally like the [[http://www.levien.com/type/myfonts/inconsolata.html][Inconsolata]] and I haven't had noticeable
   problems with it.
   
   Though on Macs I kind of like Menlo. 

   Select Menlo on a Mac and Inconsolata in other places.

   #+name: look-and-feel
   #+BEGIN_SRC emacs-lisp
       ;; Think about menlo.
   (defun my/set-font (my-font-face)
      (set-face-attribute 'default nil
                          :family my-font-face
                          :height 140
                          :weight 'normal
                          :width  'normal ))
    (if (memq window-system '(mac ns))
        (my/set-font "Menlo")
        (my/set-font "Inconsolata"))
   #+END_SRC
   
** Remove clutter
   Remove the tool bar and scroll bar. We don't like them

   #+name: look-and-feel
   #+BEGIN_SRC emacs-lisp
      (when (window-system) 
        (setq frame-title-format '(buffer-file-name "%f" ("%b")))
        (tooltip-mode -1)
        (mouse-wheel-mode t)
        (blink-cursor-mode -1)
        (tool-bar-mode -1)
        (scroll-bar-mode -1))
   #+END_SRC

** Fringe decorations

   [[http://www.emacswiki.org/emacs/TheFringe][The fringe]] is the vertical region at the right and left of the
   buffer. Emacs lets you customize it of course.

   Here I set up git diffs and buffer position in the fringe.

   #+NAME: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (when (window-system)
       (require 'git-gutter-fringe)
       (global-git-gutter-mode +1))

     (setq-default indicate-buffer-boundaries 'left)
     (setq-default indicate-empty-lines +1)
   #+END_SRC

** Mode line
   Let's try out powerline for the Mode Line

   #

** Scrolling
   Emacs has strange scrolling by default. Lets make it better.

   #+name: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (setq redisplay-dont-pause t
           scroll-margin 1
           scroll-step 1
           scroll-conservatively 10000
           scroll-preserve-screen-position 1)
   #+END_SRC

   This makes the mouse wheel and trackpad bearable.

   #+name: better-scrolling
   #+BEGIN_SRC emacs-lisp
     (setq mouse-wheel-follow-mouse 't)
     (setq mouse-wheel-scroll-amount ' (1 ((shift) . 1)))
   #+END_SRC

** Buffer names
   Setup uniquify so that non-unique buffer names get the parent path included to make them unique.

   #+name: look-and-feel
   #+BEGIN_SRC emacs-lisp
      (require 'uniquify)
      (setq uniquify-buffer-name-style 'forward)
   #+END_SRC

* Startup
Start with the scratch buffer. No startup screen.

   #+name: startup
   #+BEGIN_SRC emacs-lisp
      (setq inhibit-startup-screen +1)
   #+END_SRC

Undo Tree is really nice to have turned on all the time.

   #+name: startup
   #+BEGIN_SRC emacs-lisp
     (global-undo-tree-mode)
   #+END_SRC

* Formatting Text
** Spell Checking
Enable spell checking while editing test files using [[http://www.emacswiki.org/FlySpell][FlySpell]]

#+name: formatting
#+BEGIN_SRC emacs-lisp
    (add-hook 'text-mode-hook 'turn-on-flyspell)
#+END_SRC

* Programming
** General Settings
There are several items we want for every program mode.

*** Syntax Checking with FlyCheck
[[https://flycheck.readthedocs.org/en/latest/][FlyCheck]] is a fun little tool for on the fly syntax checking. Enable
it for every mode possible.

#+name: programming-setup
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook #'global-flycheck-mode)
#+END_SRC

FlyCheck also has the option to display a tooltip for the error
messages it created. Turn that on

#+name: programming-setup
#+BEGIN_SRC emacs-lisp
  (eval-after-load 'flycheck
    '(custom-set-variables
      '(flycheck-displaye-rrors-function #'flycheck-pos-tip-error-messages)))
#+END_SRC

*** Rainbow Coloring
Rainbow delimiters colors parens and braces different colors depending
on the depth of their nesting. While primiarly developed for lisp
languages, it is very handy in nearly every language I've come across.
Turn it on for every programming mode.

 #+name: programming-setup
 #+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook (lambda () 
                              (rainbow-delimiters-mode)
                              (rainbow-identifiers-mode)
))
 #+END_SRC

*** Yasnippits
Turn on yasnippets everywhere.

#+name: programming-setup
#+BEGIN_SRC emacs-lisp
  (yas-global-mode 1)
#+END_SRC

** Go Programming Language
Configuration for the go language.

#+name: programming-setup
#+BEGIN_SRC emacs-lisp
(setq gofmt-command "goimports")
(add-hook 'before-save-hook 'gofmt-before-save)
(add-hook 'go-mode-hook (lambda ()
                          (go-eldoc-setup)
                          (yas-minor-mode)
                          (set (make-local-variable 'company-backends) '(company-go))
                          (company-mode)))
#+END_SRC

Oracle mode is pretty nice for looking at go code.

#+name: programming-setup
#+BEGIN_SRC emacs-lisp
  (load-file "/home/lamb/Projects/gocode/src/golang.org/x/tools/cmd/oracle/oracle.el")
  (go-oracle-mode)
#+END_SRC

** Javascript
js2-mode is the best javascript mode.

#+name: programming-setup
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.js[x]?\\'" . js2-mode))
  (setq js2-highlight-level 3)
#+END_SRC

We also want magical flychecking to happen.

[[http://lbolla.info/blog/2014/11/19/flycheck-checker-for-javascript-flow][Flycheck emacs integration]] with flow

Enable paredit mode in javascript.

#+name: programming-setup
#+BEGIN_SRC emacs-lisp
  (defun lamb-js2-mode-hook ()
    "Enable paredit mode in javascript"
    (require 'js)

    (define-key js2-mode-map "{" 'paredit-open-curly)
    (define-key js2-mode-map "}" 'paredit-close-curly-and-newline)

    (set (make-local-variable 'paredit-space-delimiter-predicates)
      '((lambda (endp delimiter) nil)))
    (paredit-mode +1)
  )

  ;;(add-hook 'js2-mode-hook 'lamb-js2-mode-hook)
#+END_SRC

** HTML

** Dart
Dart mode should be installed. Setup on-the-fly syntax checking
through flycheck.

#+name: programming-setup
#+BEGIN_SRC emacs-lisp
  (setq dart-enable-analysis-server t)
  (add-hook 'dart-mode-hook 'flycheck-mode)
#+END_SRC

** Rust
  Rust-mode should auto load, but we have racer installed for some
  auto-complete goodness.

  #+name: programming-setup
  #+BEGIN_SRC emacs-lisp
    (if (and (file-exists-p "~/Projects/rust/src")
             (file-exists-p "~/Projects/racer/target/release/racer"))
      (print "Found the stuff."))
    (setq racer-rust-src-path "~/Projects/rust/src")
    (setq racer-cmd "~/Projects/racer/target/release/racer")
    (add-to-list 'load-path "/home/lamb/Projects/racer/editors/emacs")
    (eval-after-load "rust-mode" '(require 'racer))
  #+END_SRC

* Auto Complete with Company
[[https://company-mode.github.io/][Company Mode]] is a pretty good fast auto-complete package with support
for many languages. It's currently only enabled in the 'Go Config'

* Key Bindings

Allow for quick finding of files in a project.

#+name: key-bindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c f") 'find-file-in-project)
#+END_SRC

Handy backwards kill

#+name: key-bindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-M-h") 'backward-kill-word)
#+END_SRC

Short-cuts so we can quickly change the text size.

#+name: key-bindings
#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "C-+") 'text-scale-increase)
  (define-key global-map (kbd "C--") 'text-scale-decrease)
#+END_SRC

Regex searches by default.

#+name: key-bindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "\C-r") 'isearch-backward-regexp)
  (global-set-key (kbd "M-%") 'query-replace-regexp)
  (global-set-key (kbd "C-M-s") 'isearch-forward)
  (global-set-key (kbd "C-M-r") 'isearch-backward)
  (global-set-key (kbd "C-M-%") 'query-replace)
#+END_SRC


Jump to a definition in the current file. (Protip: this is awesome.)
#+name: key-bindings
#+BEGIN_SRC emacs-lisp

  (global-set-key (kbd "C-x C-i") 'imenu)

  ;; File finding
  (global-set-key (kbd "C-x M-f") 'ido-find-file-other-window)
  (global-set-key (kbd "C-c y") 'bury-buffer)
  (global-set-key (kbd "C-c r") 'revert-buffer)
#+END_SRC

Move through the open windows. (C-x o goes to the next window).

#+name: key-bindings
#+BEGIN_SRC emacs-lisp
  (windmove-default-keybindings) ;; Shift+direction
  (global-set-key (kbd "C-x O") (lambda () (interactive) (other-window -1))) ;; back one
  (global-set-key (kbd "C-x C-o") (lambda () (interactive) (other-window 2))) ;; forward two
#+END_SRC

Other stuffs to go through

#+name: key-bindings
#+BEGIN_SRC emacs-lisp
  ;; Start eshell or switch to it if it's active.
  (global-set-key (kbd "C-x m") 'eshell)
  
  ;; Start a new eshell even if one is active.
  (global-set-key (kbd "C-x M") (lambda () (interactive) (eshell t)))

  ;; Start a regular shell if you prefer that.
  (global-set-key (kbd "C-x C-m") 'shell)
#+END_SRC

#+name: key-bindings
#+BEGIN_SRC emacs-lisp
  ;; If you want to be able to M-x without meta (phones, etc)
  (global-set-key (kbd "C-c x") 'execute-extended-command)
#+END_SRC

#+name: key-bindings
#+BEGIN_SRC emacs-lisp
  ;; Help should search more than just commands
  (define-key 'help-command "a" 'apropos)

  ;; Should be able to eval-and-replace anywhere.
  (global-set-key (kbd "C-c e") 'esk-eval-and-replace)

  ;; M-S-6 is awkward
  (global-set-key (kbd "C-c q") 'join-line)
  #+END_SRC

#+name: key-bindings
#+BEGIN_SRC emacs-lisp
  ;; So good!
  (global-set-key (kbd "C-c g") 'magit-status)

  ;; This is a little hacky since VC doesn't support git add internally
  (eval-after-load 'vc
    (define-key vc-prefix-map "i"
      '(lambda () (interactive)
         (if (not (eq 'Git (vc-backend buffer-file-name)))
             (vc-register)
           (shell-command (format "git add %s" buffer-file-name))
           (message "Staged changes.")))))
#+END_SRC

#+name: key-bindings
#+BEGIN_SRC emacs-lisp
  ;; Activate occur easily inside isearch
  (define-key isearch-mode-map (kbd "C-o")
    (lambda () (interactive)
      (let ((case-fold-search isearch-case-fold-search))
        (occur (if isearch-regexp isearch-string (regexp-quote isearch-string))))))
#+END_SRC

* Org Mode
  There is so much here to cover.
  
** Clean Outline mode
  Having extra stars drives me nuts. Turn them off.

  #+name: org-config
  #+BEGIN_SRC emacs-lisp
    (setq org-startup-indented t) 
    (setq org-indent-mode t)
    (setq org-hide-leading-stars t)
  #+END_SRC

** Notes / Tasks / TODOs

 Make custom markers for todo items:

   - TODO :: something that needs to be done at some point. If it
             has a date, it should be done on that day but it may be
             moved.

   - PENDING :: something that's awaiting feedback from someone
                else. If it has a date, it needs followup if there
                hasn't been any feedback at that time.

   - MEETING :: a scheduled meeting and cannot easily be rescheduled.

   - DONE :: done.

   - CANCELED :: can be ignored. May include a note on why it's been
                 cancelled.

   #+name: org-config
   #+BEGIN_SRC emacs-lisp
     (setq org-todo-keywords
           '((sequence "TODO(t)" "PENDING(p)" "MEETING(m)" "|" "DONE(d)" "CANCELED(c)")))

   #+END_SRC

   Automatically mark todo items with todo subitems as DONE when all
   subitems are done.

   #+name: org-config
   #+BEGIN_SRC emacs-lisp

     (defun my-org-autodone (n-done n-not-done)
       "Switch entry to DONE when all subentries are done, to TODO otherwise."
       (let (org-log-done org-log-states)   ; turn off logging
         (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

     (add-hook 'org-after-todo-statistics-hook 'my-org-autodone)

   #+END_SRC

   I want to file and refile notes to any main header in any file in
   my =org-agenda-files= list.

   #+name: org-config
   #+BEGIN_SRC emacs-lisp
     (setq org-refile-targets '((nil :level . 1)
                                (org-agenda-files :level . 1)))

   #+END_SRC

** Org-Babel
*** Fontifying source blocks

    Enable syntax highlighting in src blocks.
    #+name: org-config
    #+BEGIN_SRC emacs-lisp
      (setq-default org-src-fontify-natively t)
    #+END_SRC

    Use the =minted= package for syntax highlighting source blocks in
    LaTeX / PDF exports. [[http://joat-programmer.blogspot.nl/2013/07/org-mode-version-8-and-pdf-export-with.html][Configuration copied from a blog post
    by Florian Bergmann.]]

    #+name: org-config
    #+BEGIN_SRC emacs-lisp
     ;; Include the latex-exporter
     (require 'ox-latex)
     ;; Add minted to the defaults packages to include when exporting.
     (add-to-list 'org-latex-packages-alist '("" "minted"))
     ;; Tell the latex export to use the minted package for source
     ;; code coloration.
     (setq org-latex-listings 'minted)
     ;; Let the exporter use the -shell-escape option to let latex
     ;; execute external programs.
     ;; This obviously and can be dangerous to activate!

     ;; I use pdflatex instead of xelatex because that seems to work
     ;; much better with utf-8 files
     (setq org-latex-pdf-process
           '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
             "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
             "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

    #+END_SRC

    Untangle files.

    #+name: org-config
    #+BEGIN_SRC emacs-lisp
     (global-set-key "\C-cu" 'my/org-babel-untangle)

     (defun my/org-babel-untangle (path)
       (interactive "fFile to include: ")
       (message "Untangling '%s'..." path)
       (save-current-buffer
         (let ((lang (save-current-buffer
                       (set-buffer (find-file-noselect path))
                       (my/mode->language major-mode))))
           (insert (format "\n** %s\n\n#+BEGIN_SRC %s :tangle %s\n"
                           (capitalize (replace-regexp-in-string "\\[_-\\]" " " (file-name-base path)))
                           lang
                           (file-relative-name path)))
           (forward-char (cadr (insert-file-contents path)))
           (insert "\n#+" "END_SRC\n"))))

     (defun my/mode->language (mode)
       "Return the language for the given mode"
       (intern (replace-regexp-in-string "\\-mode$" "" (my/->string mode))))

     (defun my/org-babel-untangle-tree (path)
       (interactive "Droot directory to untangle: ")
       (mapc 'my/org-babel-untangle
             (cl-remove-if 'file-directory-p
                           (f-files path (lambda (p) t) t))))

    #+END_SRC

** Language evaluation support

   Org-Babel needs to be told that evaluation of certain languages is
   allowed. I collect all languages here, then enable all of them at
   the end of the section.

   #+name: org-config :noweb no-export
   #+BEGIN_SRC emacs-lisp
     (defvar my/org-babel-evaluated-languages
       '(emacs-lisp)
       "List of languages that may be evaluated in Org documents")

     <<org-config-languages>>

     (org-babel-do-load-languages
      'org-babel-load-languages
      (mapcar (lambda (lang)
                (cons lang t))
              my/org-babel-evaluated-languages))
   #+END_SRC

** Diagramming

   I like [[http://www.graphviz.org/][Graphviz]] for generating graphs. It takes a few lines of code
   to link graphviz's =dot= mode to =org-babel= so I can include dot
   source in org mode and export with nice looking diagrams.

   #+name: org-config-languages
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-src-lang-modes (quote ("dot" . graphviz-dot)))

     (add-to-list 'my/org-babel-evaluated-languages 'dot)
   #+END_SRC

   [[http://ditaa.sourceforge.net/][Ditaa]] is another nice package for turning ASCII art into PNG/EPS
   diagrams. Turn that on, too.

   #+name: org-config-languages
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'my/org-babel-evaluated-languages 'ditaa)
   #+END_SRC

   PlantUml is built on top of Graphviz.

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'my/org-babel-evaluated-languages 'plantuml)
   #+END_SRC

* Environment
** On Macs
  OSX needs special help setting environment variables when launched
  from finder.

  #+name: environment
  #+BEGIN_SRC emacs-lisp
    (when (memq window-system '(mac ns))
      (exec-path-from-shell-initialize)
      (exec-path-from-shell-copy-env "GOPATH"))
  #+END_SRC

** Emacs Server
I like starting up an emacs process, then opening files with emacs
client.

  #+name: environment
  #+BEGIN_SRC emacs-lisp
    (server-start)
  #+END_SRC

For my shells I add the following. 'ec' allows me to open up files on
the command line for editing. Setting $EDITOR to 'emacsclient'
defaults most cli programs to open up text in emacs then wait for the
response. The $ALTERNATE_EDITOR is set so emacs launches when it's not
already running.

  #+BEGIN_SRC sh
    alias ec='emacsclient --no-wait'

    export EDITOR=emacsclient
    export ALTERNATE_EDITOR=emacs
  #+END_SRC

* Configuration File Layout
This defines the layout on the generated emacs.el file.

    #+BEGIN_SRC emacs-lisp :tangle yes :noweb no-export :exports code
      ;;;; Do not modify this file by hand.  It was automatically generated
      ;;;; from `emacs.org` in the same directory. See that file for more
      ;;;; information.
      ;;;;

      <<environment>>
      <<key-bindings>>
      <<tools>>
      <<customize-config>>
      <<look-and-feel>>
      <<formatting>>
      <<programming-setup>>
      <<auto-complete>>
      <<global-keys>>
      <<global-navigation>>
      <<org-config>>
      <<libraries>>
      <<startup>>
    #+END_SRC
  
* Options set with the customize interface
  Emacs save options set with the 'customize-*' functions in a user
  init file. By default this is '~/.emacs.d/init.el'. Let put that in
  a separate file.

   #+name: customize-config
   #+BEGIN_SRC emacs-lisp
     (setq custom-file "~/.emacs.d/custom.el")
     (load custom-file)
   #+END_SRC
  

